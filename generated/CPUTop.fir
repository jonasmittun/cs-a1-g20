;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    wire w1 : UInt<1> @[ProgramCounter.scala 20:16]
    wire w2 : UInt<1> @[ProgramCounter.scala 21:16]
    wire w3 : UInt<16> @[ProgramCounter.scala 22:16]
    node _T = eq(io.run, UInt<1>("h00")) @[ProgramCounter.scala 24:9]
    w1 <= _T @[ProgramCounter.scala 24:6]
    node _T_1 = or(io.stop, w1) @[ProgramCounter.scala 25:17]
    w2 <= _T_1 @[ProgramCounter.scala 25:6]
    node _T_2 = add(io.programCounter, UInt<1>("h01")) @[ProgramCounter.scala 26:27]
    node _T_3 = tail(_T_2, 1) @[ProgramCounter.scala 26:27]
    w3 <= _T_3 @[ProgramCounter.scala 26:6]
    node m1 = mux(io.jump, io.programCounterJump, w3) @[ProgramCounter.scala 28:15]
    node m2 = mux(w2, io.programCounter, m1) @[ProgramCounter.scala 29:15]
    reg reg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[ProgramCounter.scala 31:20]
    reg <= m2 @[ProgramCounter.scala 33:7]
    io.programCounter <= reg @[ProgramCounter.scala 35:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 20:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:24]
    else : @[DataMemory.scala 28:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:16]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip aSel : UInt<5>, flip bSel : UInt<5>, flip writeData : UInt<32>, flip writeSel : UInt<5>, flip writeEnable : UInt<1>, aOut : UInt<32>, bOut : UInt<32>}
    
    wire _T : UInt<32>[32] @[RegisterFile.scala 24:28]
    _T[0] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[1] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[2] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[3] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[4] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[5] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[6] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[7] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[8] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[9] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[10] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[11] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[12] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[13] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[14] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[15] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[16] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[17] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[18] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[19] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[20] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[21] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[22] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[23] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[24] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[25] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[26] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[27] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[28] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[29] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[30] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    _T[31] <= UInt<32>("h00") @[RegisterFile.scala 24:28]
    reg reg : UInt<32>[32], clock with : (reset => (reset, _T)) @[RegisterFile.scala 24:20]
    io.aOut <= reg[io.aSel] @[RegisterFile.scala 26:11]
    io.bOut <= reg[io.bSel] @[RegisterFile.scala 27:11]
    when io.writeEnable : @[RegisterFile.scala 29:23]
      reg[io.writeSel] <= io.writeData @[RegisterFile.scala 30:22]
      skip @[RegisterFile.scala 29:23]
    else : @[RegisterFile.scala 31:16]
      reg[io.writeSel] <= reg[io.writeSel] @[RegisterFile.scala 32:22]
      skip @[RegisterFile.scala 31:16]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<5>, ALU_op : UInt<5>, data_mux_sel : UInt<1>, int_mux_sel : UInt<1>, c_jump : UInt<1>, u_jump : UInt<1>, write_enable_dm : UInt<1>, write_enable_reg : UInt<1>, stop : UInt<1>}
    
    io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 45:13]
    io.data_mux_sel <= UInt<1>("h01") @[ControlUnit.scala 46:19]
    io.int_mux_sel <= UInt<1>("h00") @[ControlUnit.scala 47:18]
    io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 48:13]
    io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 49:13]
    io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 50:22]
    io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 51:23]
    io.stop <= UInt<1>("h00") @[ControlUnit.scala 52:11]
    node _T = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.ALU_op <= UInt<2>("h02") @[ControlUnit.scala 56:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.int_mux_sel <= UInt<1>("h01") @[ControlUnit.scala 59:22]
        io.ALU_op <= UInt<2>("h02") @[ControlUnit.scala 60:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.ALU_op <= UInt<3>("h04") @[ControlUnit.scala 63:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.int_mux_sel <= UInt<1>("h01") @[ControlUnit.scala 66:22]
            io.ALU_op <= UInt<3>("h04") @[ControlUnit.scala 67:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.ALU_op <= UInt<3>("h06") @[ControlUnit.scala 70:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.int_mux_sel <= UInt<1>("h01") @[ControlUnit.scala 73:22]
                io.ALU_op <= UInt<3>("h06") @[ControlUnit.scala 74:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<5>("h011"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.int_mux_sel <= UInt<1>("h01") @[ControlUnit.scala 77:22]
                  io.ALU_op <= UInt<5>("h011") @[ControlUnit.scala 78:17]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<5>("h012"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.data_mux_sel <= UInt<1>("h00") @[ControlUnit.scala 81:23]
                    io.ALU_op <= UInt<5>("h012") @[ControlUnit.scala 82:17]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<5>("h013"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.data_mux_sel <= UInt<1>("h00") @[ControlUnit.scala 85:23]
                      io.write_enable_dm <= UInt<1>("h01") @[ControlUnit.scala 86:26]
                      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 87:27]
                      io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 88:17]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<5>("h019"), io.opcode) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        io.int_mux_sel <= UInt<1>("h01") @[ControlUnit.scala 91:22]
                        io.u_jump <= UInt<1>("h01") @[ControlUnit.scala 92:17]
                        io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 93:27]
                        io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 94:17]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_10 = eq(UInt<5>("h015"), io.opcode) @[Conditional.scala 37:30]
                        when _T_10 : @[Conditional.scala 39:67]
                          io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 97:17]
                          io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 98:27]
                          io.ALU_op <= UInt<5>("h01a") @[ControlUnit.scala 99:17]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_11 = eq(UInt<5>("h016"), io.opcode) @[Conditional.scala 37:30]
                          when _T_11 : @[Conditional.scala 39:67]
                            io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 102:17]
                            io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 103:27]
                            io.ALU_op <= UInt<5>("h01b") @[ControlUnit.scala 104:17]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_12 = eq(UInt<5>("h017"), io.opcode) @[Conditional.scala 37:30]
                            when _T_12 : @[Conditional.scala 39:67]
                              io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 107:17]
                              io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 108:27]
                              io.ALU_op <= UInt<5>("h01c") @[ControlUnit.scala 109:17]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_13 = eq(UInt<5>("h01a"), io.opcode) @[Conditional.scala 37:30]
                              when _T_13 : @[Conditional.scala 39:67]
                                io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 112:17]
                                io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 113:27]
                                io.ALU_op <= UInt<5>("h01a") @[ControlUnit.scala 114:17]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_14 = eq(UInt<5>("h01b"), io.opcode) @[Conditional.scala 37:30]
                                when _T_14 : @[Conditional.scala 39:67]
                                  io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 117:17]
                                  io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 118:27]
                                  io.ALU_op <= UInt<5>("h01b") @[ControlUnit.scala 119:17]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_15 = eq(UInt<5>("h01c"), io.opcode) @[Conditional.scala 37:30]
                                  when _T_15 : @[Conditional.scala 39:67]
                                    io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 122:17]
                                    io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 123:27]
                                    io.ALU_op <= UInt<5>("h01c") @[ControlUnit.scala 124:17]
                                    skip @[Conditional.scala 39:67]
                                  else : @[Conditional.scala 39:67]
                                    node _T_16 = eq(UInt<5>("h01f"), io.opcode) @[Conditional.scala 37:30]
                                    when _T_16 : @[Conditional.scala 39:67]
                                      io.data_mux_sel <= UInt<1>("h00") @[ControlUnit.scala 127:23]
                                      io.stop <= UInt<1>("h01") @[ControlUnit.scala 128:15]
                                      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 129:27]
                                      io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 130:17]
                                      skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip op : UInt<5>, flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>, boolVal : UInt<1>}
    
    io.result <= UInt<1>("h00") @[ALU.scala 20:13]
    io.boolVal <= UInt<1>("h00") @[ALU.scala 21:14]
    node _T = eq(UInt<2>("h02"), io.op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.a, io.b) @[ALU.scala 34:25]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 34:25]
      io.result <= _T_2 @[ALU.scala 34:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<3>("h06"), io.op) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = mul(io.a, io.b) @[ALU.scala 37:25]
        io.result <= _T_4 @[ALU.scala 37:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<3>("h04"), io.op) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          node _T_6 = sub(io.a, io.b) @[ALU.scala 40:25]
          node _T_7 = tail(_T_6, 1) @[ALU.scala 40:25]
          io.result <= _T_7 @[ALU.scala 40:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<5>("h011"), io.op) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            io.result <= io.b @[ALU.scala 43:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_9 = eq(UInt<5>("h01a"), io.op) @[Conditional.scala 37:30]
            when _T_9 : @[Conditional.scala 39:67]
              node _T_10 = eq(io.a, io.b) @[ALU.scala 46:27]
              io.boolVal <= _T_10 @[ALU.scala 46:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_11 = eq(UInt<5>("h01b"), io.op) @[Conditional.scala 37:30]
              when _T_11 : @[Conditional.scala 39:67]
                node _T_12 = gt(io.a, io.b) @[ALU.scala 49:26]
                io.boolVal <= _T_12 @[ALU.scala 49:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_13 = eq(UInt<5>("h01c"), io.op) @[Conditional.scala 37:30]
                when _T_13 : @[Conditional.scala 39:67]
                  node _T_14 = lt(io.a, io.b) @[ALU.scala 52:26]
                  io.boolVal <= _T_14 @[ALU.scala 52:18]
                  skip @[Conditional.scala 39:67]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 30:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 31:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 32:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 33:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 34:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 35:19]
    alu.clock <= clock
    alu.reset <= reset
    io.done <= controlUnit.io.stop @[CPUTop.scala 46:11]
    programCounter.io.run <= io.run @[CPUTop.scala 49:25]
    programCounter.io.stop <= controlUnit.io.stop @[CPUTop.scala 50:26]
    node _T = and(controlUnit.io.c_jump, alu.io.boolVal) @[CPUTop.scala 51:76]
    node _T_1 = or(controlUnit.io.u_jump, _T) @[CPUTop.scala 51:51]
    programCounter.io.jump <= _T_1 @[CPUTop.scala 51:26]
    node _T_2 = bits(programMemory.io.instructionRead, 16, 1) @[CPUTop.scala 52:75]
    programCounter.io.programCounterJump <= _T_2 @[CPUTop.scala 52:40]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 55:28]
    registerFile.io.writeEnable <= controlUnit.io.write_enable_reg @[CPUTop.scala 58:31]
    node _T_3 = bits(programMemory.io.instructionRead, 26, 22) @[CPUTop.scala 59:63]
    registerFile.io.writeSel <= _T_3 @[CPUTop.scala 59:28]
    node _T_4 = bits(programMemory.io.instructionRead, 26, 22) @[CPUTop.scala 60:86]
    node _T_5 = bits(programMemory.io.instructionRead, 21, 17) @[CPUTop.scala 60:128]
    node _T_6 = mux(controlUnit.io.c_jump, _T_4, _T_5) @[CPUTop.scala 60:30]
    registerFile.io.aSel <= _T_6 @[CPUTop.scala 60:24]
    node _T_7 = bits(programMemory.io.instructionRead, 21, 17) @[CPUTop.scala 61:86]
    node _T_8 = bits(programMemory.io.instructionRead, 16, 12) @[CPUTop.scala 61:128]
    node _T_9 = mux(controlUnit.io.c_jump, _T_7, _T_8) @[CPUTop.scala 61:30]
    registerFile.io.bSel <= _T_9 @[CPUTop.scala 61:24]
    node _T_10 = mux(controlUnit.io.data_mux_sel, alu.io.result, dataMemory.io.dataRead) @[CPUTop.scala 62:35]
    registerFile.io.writeData <= _T_10 @[CPUTop.scala 62:29]
    node _T_11 = bits(programMemory.io.instructionRead, 31, 27) @[CPUTop.scala 65:60]
    controlUnit.io.opcode <= _T_11 @[CPUTop.scala 65:25]
    alu.io.a <= registerFile.io.aOut @[CPUTop.scala 68:12]
    node _T_12 = bits(programMemory.io.instructionRead, 16, 1) @[CPUTop.scala 69:94]
    node _T_13 = cat(UInt<16>("h00"), _T_12) @[Cat.scala 29:58]
    node _T_14 = mux(controlUnit.io.int_mux_sel, _T_13, registerFile.io.bOut) @[CPUTop.scala 69:18]
    alu.io.b <= _T_14 @[CPUTop.scala 69:12]
    alu.io.op <= controlUnit.io.ALU_op @[CPUTop.scala 70:13]
    dataMemory.io.writeEnable <= controlUnit.io.write_enable_dm @[CPUTop.scala 73:29]
    dataMemory.io.dataWrite <= registerFile.io.bOut @[CPUTop.scala 74:27]
    dataMemory.io.address <= registerFile.io.aOut @[CPUTop.scala 75:25]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 78:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 79:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 80:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 81:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 82:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 84:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 85:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 86:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 87:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 88:35]
    
