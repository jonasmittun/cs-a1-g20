;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    wire w1 : UInt<1> @[ProgramCounter.scala 14:16]
    wire w2 : UInt<1> @[ProgramCounter.scala 15:16]
    wire w3 : UInt<16> @[ProgramCounter.scala 16:16]
    node _T = eq(io.run, UInt<1>("h00")) @[ProgramCounter.scala 18:9]
    w1 <= _T @[ProgramCounter.scala 18:6]
    node _T_1 = or(io.stop, w1) @[ProgramCounter.scala 19:17]
    w2 <= _T_1 @[ProgramCounter.scala 19:6]
    node _T_2 = add(io.programCounter, UInt<1>("h01")) @[ProgramCounter.scala 20:27]
    node _T_3 = tail(_T_2, 1) @[ProgramCounter.scala 20:27]
    w3 <= _T_3 @[ProgramCounter.scala 20:6]
    node m1 = mux(io.jump, io.programCounterJump, w3) @[ProgramCounter.scala 22:15]
    node m2 = mux(w2, io.programCounter, m1) @[ProgramCounter.scala 23:15]
    reg reg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[ProgramCounter.scala 25:20]
    reg <= m2 @[ProgramCounter.scala 27:7]
    io.programCounter <= reg @[ProgramCounter.scala 29:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 20:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:24]
    else : @[DataMemory.scala 28:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:16]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip aSel : UInt<5>, flip bSel : UInt<5>, flip writeData : UInt<32>, flip writeSel : UInt<5>, flip writeEnable : UInt<1>, aOut : UInt<32>, bOut : UInt<32>}
    
    wire _T : UInt<32>[32] @[RegisterFile.scala 18:28]
    _T[0] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[1] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[2] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[3] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[4] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[5] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[6] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[7] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[8] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[9] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[10] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[11] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[12] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[13] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[14] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[15] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[16] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[17] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[18] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[19] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[20] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[21] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[22] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[23] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[24] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[25] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[26] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[27] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[28] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[29] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[30] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    _T[31] <= UInt<32>("h00") @[RegisterFile.scala 18:28]
    reg reg : UInt<32>[32], clock with : (reset => (reset, _T)) @[RegisterFile.scala 18:20]
    io.aOut <= reg[io.aSel] @[RegisterFile.scala 20:11]
    io.bOut <= reg[io.bSel] @[RegisterFile.scala 21:11]
    when io.writeEnable : @[RegisterFile.scala 23:23]
      reg[io.writeSel] <= io.writeData @[RegisterFile.scala 24:22]
      skip @[RegisterFile.scala 23:23]
    else : @[RegisterFile.scala 25:16]
      reg[io.writeSel] <= reg[io.writeSel] @[RegisterFile.scala 26:22]
      skip @[RegisterFile.scala 25:16]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<4>, ALU_op : UInt<4>, c_jump : UInt<1>, mux_sel1 : UInt<1>, mux_sel2 : UInt<1>, stop : UInt<1>, u_jump : UInt<1>, write_enable_dm : UInt<1>, write_enable_reg : UInt<1>}
    
    node _T = eq(io.opcode, UInt<1>("h01")) @[ControlUnit.scala 20:19]
    when _T : @[ControlUnit.scala 20:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 21:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 22:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 24:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 26:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 27:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 29:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 30:25]
      io.ALU_op <= UInt<1>("h01") @[ControlUnit.scala 32:15]
      skip @[ControlUnit.scala 20:31]
    node _T_1 = eq(io.opcode, UInt<2>("h02")) @[ControlUnit.scala 35:19]
    when _T_1 : @[ControlUnit.scala 35:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 36:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 37:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 39:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 41:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 42:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 44:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 45:25]
      io.ALU_op <= UInt<1>("h01") @[ControlUnit.scala 47:15]
      skip @[ControlUnit.scala 35:31]
    node _T_2 = eq(io.opcode, UInt<2>("h03")) @[ControlUnit.scala 50:19]
    when _T_2 : @[ControlUnit.scala 50:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 51:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 52:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 54:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 56:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 57:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 59:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 60:25]
      io.ALU_op <= UInt<2>("h02") @[ControlUnit.scala 62:15]
      skip @[ControlUnit.scala 50:31]
    node _T_3 = eq(io.opcode, UInt<3>("h04")) @[ControlUnit.scala 65:19]
    when _T_3 : @[ControlUnit.scala 65:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 66:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 67:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 69:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 71:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 72:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 74:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 75:25]
      io.ALU_op <= UInt<2>("h02") @[ControlUnit.scala 77:15]
      skip @[ControlUnit.scala 65:31]
    node _T_4 = eq(io.opcode, UInt<3>("h05")) @[ControlUnit.scala 80:19]
    when _T_4 : @[ControlUnit.scala 80:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 81:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 82:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 84:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 86:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 87:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 89:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 90:25]
      io.ALU_op <= UInt<2>("h03") @[ControlUnit.scala 92:15]
      skip @[ControlUnit.scala 80:31]
    node _T_5 = eq(io.opcode, UInt<3>("h06")) @[ControlUnit.scala 95:19]
    when _T_5 : @[ControlUnit.scala 95:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 96:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 97:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 99:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 101:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 102:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 104:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 105:25]
      io.ALU_op <= UInt<2>("h03") @[ControlUnit.scala 107:15]
      skip @[ControlUnit.scala 95:31]
    node _T_6 = eq(io.opcode, UInt<3>("h07")) @[ControlUnit.scala 110:19]
    when _T_6 : @[ControlUnit.scala 110:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 111:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 112:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 114:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 116:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 117:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 119:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 120:25]
      io.ALU_op <= UInt<3>("h04") @[ControlUnit.scala 122:15]
      skip @[ControlUnit.scala 110:31]
    node _T_7 = eq(io.opcode, UInt<4>("h08")) @[ControlUnit.scala 125:19]
    when _T_7 : @[ControlUnit.scala 125:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 126:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 127:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 129:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 131:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 132:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 134:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 135:25]
      io.ALU_op <= UInt<3>("h05") @[ControlUnit.scala 137:15]
      skip @[ControlUnit.scala 125:31]
    node _T_8 = eq(io.opcode, UInt<4>("h09")) @[ControlUnit.scala 140:19]
    when _T_8 : @[ControlUnit.scala 140:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 141:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 142:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 144:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 146:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 147:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 149:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 150:25]
      io.ALU_op <= UInt<3>("h06") @[ControlUnit.scala 152:15]
      skip @[ControlUnit.scala 140:31]
    node _T_9 = eq(io.opcode, UInt<4>("h0a")) @[ControlUnit.scala 155:19]
    when _T_9 : @[ControlUnit.scala 155:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 156:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 157:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 159:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 161:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 162:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 164:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 165:25]
      io.ALU_op <= UInt<3>("h07") @[ControlUnit.scala 167:15]
      skip @[ControlUnit.scala 155:31]
    node _T_10 = eq(io.opcode, UInt<4>("h0b")) @[ControlUnit.scala 170:19]
    when _T_10 : @[ControlUnit.scala 170:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 171:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 172:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 174:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 176:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 177:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 179:24]
      io.write_enable_reg <= UInt<1>("h01") @[ControlUnit.scala 180:25]
      io.ALU_op <= UInt<4>("h08") @[ControlUnit.scala 182:15]
      skip @[ControlUnit.scala 170:31]
    node _T_11 = eq(io.opcode, UInt<4>("h0c")) @[ControlUnit.scala 185:19]
    when _T_11 : @[ControlUnit.scala 185:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 186:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 187:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 189:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 191:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 192:15]
      io.write_enable_dm <= UInt<1>("h01") @[ControlUnit.scala 194:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 195:25]
      io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 197:15]
      skip @[ControlUnit.scala 185:31]
    node _T_12 = eq(io.opcode, UInt<4>("h0d")) @[ControlUnit.scala 200:19]
    when _T_12 : @[ControlUnit.scala 200:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 201:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 202:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 204:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 206:15]
      io.u_jump <= UInt<1>("h01") @[ControlUnit.scala 207:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 209:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 210:25]
      io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 212:15]
      skip @[ControlUnit.scala 200:31]
    node _T_13 = eq(io.opcode, UInt<4>("h0e")) @[ControlUnit.scala 215:19]
    when _T_13 : @[ControlUnit.scala 215:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 216:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 217:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 219:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 221:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 222:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 224:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 225:25]
      io.ALU_op <= UInt<4>("h09") @[ControlUnit.scala 227:15]
      skip @[ControlUnit.scala 215:31]
    node _T_14 = eq(io.opcode, UInt<4>("h0f")) @[ControlUnit.scala 230:19]
    when _T_14 : @[ControlUnit.scala 230:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 231:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 232:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 234:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 236:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 237:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 239:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 240:25]
      io.ALU_op <= UInt<4>("h0a") @[ControlUnit.scala 242:15]
      skip @[ControlUnit.scala 230:31]
    node _T_15 = eq(io.opcode, UInt<5>("h010")) @[ControlUnit.scala 245:19]
    when _T_15 : @[ControlUnit.scala 245:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 246:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 247:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 249:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 251:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 252:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 254:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 255:25]
      io.ALU_op <= UInt<4>("h0b") @[ControlUnit.scala 257:15]
      skip @[ControlUnit.scala 245:31]
    node _T_16 = eq(io.opcode, UInt<5>("h011")) @[ControlUnit.scala 260:19]
    when _T_16 : @[ControlUnit.scala 260:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 261:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 262:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 264:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 266:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 267:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 269:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 270:25]
      io.ALU_op <= UInt<4>("h0c") @[ControlUnit.scala 272:15]
      skip @[ControlUnit.scala 260:31]
    node _T_17 = eq(io.opcode, UInt<5>("h012")) @[ControlUnit.scala 275:19]
    when _T_17 : @[ControlUnit.scala 275:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 276:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 277:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 279:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 281:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 282:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 284:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 285:25]
      io.ALU_op <= UInt<4>("h0d") @[ControlUnit.scala 287:15]
      skip @[ControlUnit.scala 275:31]
    node _T_18 = eq(io.opcode, UInt<5>("h013")) @[ControlUnit.scala 290:19]
    when _T_18 : @[ControlUnit.scala 290:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 291:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 292:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 294:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 296:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 297:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 299:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 300:25]
      io.ALU_op <= UInt<4>("h0e") @[ControlUnit.scala 302:15]
      skip @[ControlUnit.scala 290:31]
    node _T_19 = eq(io.opcode, UInt<5>("h014")) @[ControlUnit.scala 305:19]
    when _T_19 : @[ControlUnit.scala 305:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 306:17]
      io.mux_sel2 <= UInt<1>("h01") @[ControlUnit.scala 307:17]
      io.stop <= UInt<1>("h00") @[ControlUnit.scala 309:13]
      io.c_jump <= UInt<1>("h01") @[ControlUnit.scala 311:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 312:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 314:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 315:25]
      io.ALU_op <= UInt<4>("h0f") @[ControlUnit.scala 317:15]
      skip @[ControlUnit.scala 305:31]
    node _T_20 = eq(io.opcode, UInt<5>("h015")) @[ControlUnit.scala 320:19]
    when _T_20 : @[ControlUnit.scala 320:31]
      io.mux_sel1 <= UInt<1>("h01") @[ControlUnit.scala 321:17]
      io.mux_sel2 <= UInt<1>("h00") @[ControlUnit.scala 322:17]
      io.stop <= UInt<1>("h01") @[ControlUnit.scala 324:13]
      io.c_jump <= UInt<1>("h00") @[ControlUnit.scala 326:15]
      io.u_jump <= UInt<1>("h00") @[ControlUnit.scala 327:15]
      io.write_enable_dm <= UInt<1>("h00") @[ControlUnit.scala 329:24]
      io.write_enable_reg <= UInt<1>("h00") @[ControlUnit.scala 330:25]
      io.ALU_op <= UInt<1>("h00") @[ControlUnit.scala 332:15]
      skip @[ControlUnit.scala 320:31]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip op : UInt<4>, flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>, boolVal : UInt<1>}
    
    io.result <= UInt<1>("h00") @[ALU.scala 14:13]
    io.boolVal <= UInt<1>("h00") @[ALU.scala 15:14]
    node _T = eq(UInt<1>("h01"), io.op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.a, io.b) @[ALU.scala 29:25]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 29:25]
      io.result <= _T_2 @[ALU.scala 29:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h03"), io.op) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = mul(io.a, io.b) @[ALU.scala 32:25]
        io.result <= _T_4 @[ALU.scala 32:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<2>("h02"), io.op) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          node _T_6 = sub(io.a, io.b) @[ALU.scala 35:25]
          node _T_7 = tail(_T_6, 1) @[ALU.scala 35:25]
          io.result <= _T_7 @[ALU.scala 35:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<4>("h0d"), io.op) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = eq(io.a, io.b) @[ALU.scala 38:26]
            io.boolVal <= _T_9 @[ALU.scala 38:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<4>("h0e"), io.op) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              node _T_11 = gt(io.a, io.b) @[ALU.scala 41:26]
              io.boolVal <= _T_11 @[ALU.scala 41:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_12 = eq(UInt<4>("h0f"), io.op) @[Conditional.scala 37:30]
              when _T_12 : @[Conditional.scala 39:67]
                node _T_13 = lt(io.a, io.b) @[ALU.scala 44:26]
                io.boolVal <= _T_13 @[ALU.scala 44:18]
                skip @[Conditional.scala 39:67]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 23:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 24:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 25:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 26:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 27:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 28:19]
    alu.clock <= clock
    alu.reset <= reset
    wire stop : UInt<1> @[CPUTop.scala 39:18]
    wire jump : UInt<1> @[CPUTop.scala 40:18]
    wire counterJump : UInt<16> @[CPUTop.scala 41:25]
    wire counter : UInt<16> @[CPUTop.scala 42:21]
    wire instruction : UInt<32> @[CPUTop.scala 43:25]
    wire opcode : UInt<5> @[CPUTop.scala 44:20]
    wire writeSel : UInt<5> @[CPUTop.scala 45:22]
    wire aSel : UInt<5> @[CPUTop.scala 46:18]
    wire bSel : UInt<5> @[CPUTop.scala 47:18]
    wire intermediate : UInt<16> @[CPUTop.scala 48:26]
    wire writeEnableReg : UInt<1> @[CPUTop.scala 49:28]
    wire writeData : UInt<32> @[CPUTop.scala 50:23]
    wire a : UInt<32> @[CPUTop.scala 51:15]
    wire b : UInt<32> @[CPUTop.scala 52:15]
    wire uJump : UInt<1> @[CPUTop.scala 53:19]
    wire cJump : UInt<1> @[CPUTop.scala 54:19]
    wire writeEnableDat : UInt<1> @[CPUTop.scala 55:28]
    wire aluOp : UInt<4> @[CPUTop.scala 56:19]
    wire intSel : UInt<1> @[CPUTop.scala 57:20]
    wire writeDataSel : UInt<1> @[CPUTop.scala 58:26]
    wire result : UInt<32> @[CPUTop.scala 59:20]
    wire boolResult : UInt<1> @[CPUTop.scala 60:24]
    wire bMux : UInt<1> @[CPUTop.scala 61:18]
    wire dataRead : UInt<32> @[CPUTop.scala 62:22]
    wire dataWrite : UInt<32> @[CPUTop.scala 63:23]
    wire dataAddress : UInt<16> @[CPUTop.scala 64:25]
    wire jumpAndOr : UInt<1> @[CPUTop.scala 65:23]
    io.done <= controlUnit.io.stop @[CPUTop.scala 68:11]
    programCounter.io.run <= io.run @[CPUTop.scala 71:25]
    programCounter.io.stop <= stop @[CPUTop.scala 72:26]
    programCounter.io.jump <= jump @[CPUTop.scala 73:26]
    programCounter.io.programCounterJump <= counterJump @[CPUTop.scala 74:40]
    counter <= programCounter.io.programCounter @[CPUTop.scala 75:11]
    programMemory.io.address <= counter @[CPUTop.scala 78:28]
    instruction <= programMemory.io.instructionRead @[CPUTop.scala 79:15]
    registerFile.io.writeEnable <= writeEnableReg @[CPUTop.scala 82:31]
    registerFile.io.writeSel <= writeSel @[CPUTop.scala 83:28]
    registerFile.io.aSel <= aSel @[CPUTop.scala 84:24]
    registerFile.io.bSel <= bSel @[CPUTop.scala 85:24]
    registerFile.io.writeData <= writeData @[CPUTop.scala 86:29]
    a <= registerFile.io.aOut @[CPUTop.scala 87:5]
    b <= registerFile.io.bOut @[CPUTop.scala 88:5]
    controlUnit.io.opcode <= opcode @[CPUTop.scala 91:25]
    stop <= controlUnit.io.stop @[CPUTop.scala 92:8]
    uJump <= controlUnit.io.u_jump @[CPUTop.scala 93:9]
    cJump <= controlUnit.io.c_jump @[CPUTop.scala 94:9]
    writeEnableDat <= controlUnit.io.write_enable_dm @[CPUTop.scala 95:18]
    aluOp <= controlUnit.io.ALU_op @[CPUTop.scala 96:9]
    intSel <= controlUnit.io.mux_sel2 @[CPUTop.scala 97:10]
    writeDataSel <= controlUnit.io.mux_sel1 @[CPUTop.scala 98:16]
    writeEnableReg <= controlUnit.io.write_enable_reg @[CPUTop.scala 99:18]
    alu.io.a <= a @[CPUTop.scala 102:12]
    alu.io.b <= bMux @[CPUTop.scala 103:12]
    alu.io.op <= aluOp @[CPUTop.scala 104:13]
    result <= alu.io.result @[CPUTop.scala 105:10]
    boolResult <= alu.io.boolVal @[CPUTop.scala 106:14]
    dataMemory.io.writeEnable <= writeEnableDat @[CPUTop.scala 109:29]
    dataMemory.io.dataWrite <= dataWrite @[CPUTop.scala 110:27]
    dataMemory.io.address <= dataAddress @[CPUTop.scala 111:25]
    dataRead <= dataMemory.io.dataRead @[CPUTop.scala 112:12]
    node intMux = mux(intSel, b, intermediate) @[CPUTop.scala 115:19]
    bMux <= intMux @[CPUTop.scala 116:8]
    node datMux = mux(writeDataSel, dataRead, result) @[CPUTop.scala 119:19]
    writeData <= datMux @[CPUTop.scala 120:13]
    node _T = and(boolResult, cJump) @[CPUTop.scala 123:27]
    jumpAndOr <= _T @[CPUTop.scala 123:13]
    node _T_1 = or(jumpAndOr, uJump) @[CPUTop.scala 126:21]
    jump <= _T_1 @[CPUTop.scala 126:8]
    node _T_2 = bits(instruction, 31, 16) @[CPUTop.scala 129:29]
    counterJump <= _T_2 @[CPUTop.scala 129:15]
    node _T_3 = bits(instruction, 31, 27) @[CPUTop.scala 130:24]
    opcode <= _T_3 @[CPUTop.scala 130:10]
    node _T_4 = bits(instruction, 26, 22) @[CPUTop.scala 131:26]
    writeSel <= _T_4 @[CPUTop.scala 131:12]
    node _T_5 = bits(instruction, 21, 17) @[CPUTop.scala 132:22]
    aSel <= _T_5 @[CPUTop.scala 132:8]
    node _T_6 = bits(instruction, 16, 12) @[CPUTop.scala 133:22]
    bSel <= _T_6 @[CPUTop.scala 133:8]
    node _T_7 = bits(instruction, 16, 1) @[CPUTop.scala 134:30]
    intermediate <= _T_7 @[CPUTop.scala 134:16]
    dataWrite <= b @[CPUTop.scala 135:13]
    node _T_8 = bits(b, 31, 16) @[CPUTop.scala 136:19]
    dataAddress <= _T_8 @[CPUTop.scala 136:15]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 139:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 140:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 141:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 142:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 143:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 145:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 146:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 147:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 148:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 149:35]
    
